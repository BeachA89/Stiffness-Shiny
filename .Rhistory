#req(input$Mass)
Mass <- dlgInput("Enter mass (kg)")$res
Mass <- type.convert(Mass, numerals = "allow.loss")
BW = Mass*9.8
Trial <- dlgInput("Enter Trial and Freq i.e. Left 1.7")$res
Flight <- which(Fz2$Fz2 <5)[1]
Contact <- Flight[1] - 1 +5 + which(Fz2$Fz2[Flight[1]+5:length(Fz2$Fz2)] >5)[1]
zerooffset = mean(Fz2$Fz2[Flight:Contact])
Fz2$Fz2 = Fz2$Fz2 - zerooffset
Flight[1] <- which(Fz2$Fz2 <5) [1]
for (r in 1:16){
t = r+1
Contact[r] <- Flight[r] - 1 +5 + which(Fz2$Fz2[Flight[r]+5:length(Fz2$Fz2)] >5)
Flight[t] <- Contact[r] - 1 +5 + which(Fz2$Fz2[Contact[r]+5:length(Fz2$Fz2)] <5)
}
fullplot <-  ggplot(Fz2, aes(x=1:length(Fz2), y=Fz2)) +
geom_line() +
geom_vline(xintercept=Flight[1], col="green") +
geom_vline(xintercept=Contact[1], col="red") +
geom_vline(xintercept=Flight[2], col="green") +
geom_vline(xintercept=Contact[2], col="red") +
geom_vline(xintercept=Flight[3], col="green") +
geom_vline(xintercept=Contact[3], col="red") +
geom_vline(xintercept=Flight[4], col="green") +
geom_vline(xintercept=Contact[4], col="red") +
geom_vline(xintercept=Flight[5], col="green") +
geom_vline(xintercept=Contact[5], col="red") +
geom_vline(xintercept=Flight[6], col="green") +
geom_vline(xintercept=Contact[6], col="red") +
geom_vline(xintercept=Flight[7], col="green") +
geom_vline(xintercept=Contact[7], col="red") +
geom_vline(xintercept=Flight[8], col="green") +
geom_vline(xintercept=Contact[8], col="red") +
geom_vline(xintercept=Flight[9], col="green") +
geom_vline(xintercept=Contact[9], col="red") +
geom_vline(xintercept=Flight[10], col="green") +
geom_vline(xintercept=Contact[10], col="red") +
geom_vline(xintercept=Flight[11], col="green") +
geom_vline(xintercept=Contact[11], col="red") +
geom_vline(xintercept=Flight[12], col="green") +
geom_vline(xintercept=Contact[12], col="red") +
geom_vline(xintercept=Flight[13], col="green") +
geom_vline(xintercept=Contact[13], col="red") +
geom_vline(xintercept=Flight[14], col="green") +
geom_vline(xintercept=Contact[14], col="red") +
geom_vline(xintercept=Flight[15], col="green") +
geom_vline(xintercept=Contact[15], col="red") +
geom_vline(xintercept=Flight[16], col="green") +
geom_vline(xintercept=Contact[16], col="red")
show(fullplot)
# dlg_message(c("Is the hop devision correct?", "Continue?"), "okcancel")$res
for (r in 1:15){
t = r+1
nam <- paste("FullHop", r, sep = "")
assign(nam, Fz2$Fz2[Contact[r]:Contact[t]])
}
for (r in 1:16){
t = r+1
nam <- paste("Hop", r, sep = "")
assign(nam, Fz2$Fz2[Flight[r]:Flight[t]])
}
for (r in 1:16){
t = r+1
#Hop1
#Calculate Acceleration
Hop <- paste("Hop",r, sep = "")
Acc <- paste("HopAcc", r, sep = "")
assign(Acc, (Hop-BW)/Mass)
}
for (r in 1:16){
t = r+1
#Hop1
#Calculate Acceleration
Acc <- paste("HopAcc", r, sep = "")
assign(Acc, ((paste("Hop",r, sep = ""))-BW)/Mass)
}
for (r in 1:16){
t = r+1
#Hop1
#Calculate Acceleration
Acc <- paste("HopAcc", r, sep = "")
a <-  Hop{1}
assign(Acc, a)
}
rm(Hop).
rm(Hop)
for (r in 1:16){
t = r+1
#Hop1
#Calculate Acceleration
Acc <- paste("HopAcc", r, sep = "")
a <-  Hop(r)
assign(Acc, a)
}
for (r in 1:16){
t = r+1
#Hop1
#Calculate Acceleration
Acc <- paste("HopAcc", r, sep = "")
a <-  Hop[r]
assign(Acc, a)
}
for (r in 1:16){
t = r+1
#Hop1
#Calculate Acceleration
Acc <- paste("HopAcc", r, sep = "")
a <-  Hop{r}
assign(Acc, a)
}
# windows()
# plot(FullHop11)
# windows()
# plot(FullHop12)
# windows()
# plot(FullHop13)
# windows()
# plot(FullHop14)
# windows()
# plot(FullHop15)
for (r in 1:16){
a[r] <- paste("Hop", r, sep = "")
}
# windows()
# plot(FullHop11)
# windows()
# plot(FullHop12)
# windows()
# plot(FullHop13)
# windows()
# plot(FullHop14)
# windows()
# plot(FullHop15)
a <-  0
for (r in 1:16){
a[r] <- paste("Hop", r, sep = "")
}
FullHops <- list()
for(r in 1:15){
FullHops[[i-1]] <- Fz2$Fz2[Contact[r]:Contact[t]]
}
FullHops <- list()
for(r in 1:15){
t <- r+1
FullHops[[r-1]] <- Fz2$Fz2[Contact[r]:Contact[t]]
}
FullHops <- list()
for(r in 1:15){
t <- r+1
FullHops[[r]] <- Fz2$Fz2[Contact[r]:Contact[t]]
}
View(FullHops)
View(FullHops)
Hops <- list()
for(r in 1:15){
t <- r+1
Hops[[r]] <- Fz2$Fz2[Flight[r]:Flight[t]]
}
View(Hops)
for (r in 1:16){
#Hop1
#Calculate Acceleration
paste("HopAcc", r, sep = "")  <- (Hops[[r]]-BW)/Mass
}
View(FullHops[[1]])
for (r in 1:16){
#Hop1
#Calculate Acceleration
paste0("HopAcc", r, sep = "")  <- (Hops[[r]]-BW)/Mass
}
or (r in 1:16){
#Hop1
#Calculate Acceleration
assign(paste0("HopAcc", r, sep = ""), (Hops[[r]]-BW)/Mass)
}
for (r in 1:16){
#Hop1
#Calculate Acceleration
assign(paste0("HopAcc", r, sep = ""), (Hops[[r]]-BW)/Mass)
}
for (r in 1:15){
#Hop1
#Calculate Acceleration
a <-  assign(paste0("HopAcc", r, sep = ""), (Hops[[r]]-BW)/Mass)
assign(paste0("HopAcc", r, sep = ""), (Hops[[r]]-BW)/Mass)
}
for (r in 1:15){
#Hop1
#Calculate Acceleration
HopAcc <- (Hops[[r]]-BW)/Mass
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
#Acceleration Area
HopAccarea = HopAccavg2*0.001
HopVelInit = 1.3
#Velocity
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
#Velocity Area
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
#Displacement
HopDisp = cumsum(HopVelarea)
l = length(HopDisp)
#Adjust Init Velocity to get Final Displacment close to zero
if (HopDisp[l]>0){
while (HopDisp[l] > 0.0001) {
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
HopAccarea = HopAccavg2*0.001
HopVelInit = HopVelInit - 0.001
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
HopDisp = cumsum(HopVelarea)}
}else (HopDisp[l]<0)
{
while (HopDisp[l] < 0.0001) {
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
HopAccarea = HopAccavg2*0.001
HopVelInit = HopVelInit + 0.001
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
HopDisp = cumsum(HopVelarea)
}
}
#Calculate output variables
assign(paste0("PeakHop", r, sep = ""), max(Hop))
assign(paste0("PeakHopPC", r, sep = ""), max(Hop)/BW)
ContactHop <- 5 + which(Hop[5:length(Hop)] >5)[1]
assign(paste0("ContactTimeHop", r, sep = ""), (length(HopDisp) - ContactHop)*0.001)
assign(paste0("MinHopDisp", r, sep = ""), min(HopDisp))
assign(paste0("EccHopDisp", r, sep = ""), (HopDisp[ContactHop] - MinHopDisp))
assign(paste0("EccStiffHop", r, sep = ""), ((max(Hop) - BW)/(HopDisp[ContactHop] - MinHopDisp))/Mass)
assign(paste0("JumpFreqHop", r, sep = ""), 1/(length(FullHop[[r]])*0.001))
}
for (r in 1:15){
#Hop1
#Calculate Acceleration
Hop <-  Hops[[r]]
HopAcc <- (Hop-BW)/Mass
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
#Acceleration Area
HopAccarea = HopAccavg2*0.001
HopVelInit = 1.3
#Velocity
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
#Velocity Area
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
#Displacement
HopDisp = cumsum(HopVelarea)
l = length(HopDisp)
#Adjust Init Velocity to get Final Displacment close to zero
if (HopDisp[l]>0){
while (HopDisp[l] > 0.0001) {
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
HopAccarea = HopAccavg2*0.001
HopVelInit = HopVelInit - 0.001
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
HopDisp = cumsum(HopVelarea)}
}else (HopDisp[l]<0)
{
while (HopDisp[l] < 0.0001) {
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
HopAccarea = HopAccavg2*0.001
HopVelInit = HopVelInit + 0.001
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
HopDisp = cumsum(HopVelarea)
}
}
#Calculate output variables
assign(paste0("PeakHop", r, sep = ""), max(Hop))
assign(paste0("PeakHopPC", r, sep = ""), max(Hop)/BW)
ContactHop <- 5 + which(Hop[5:length(Hop)] >5)[1]
assign(paste0("ContactTimeHop", r, sep = ""), (length(HopDisp) - ContactHop)*0.001)
assign(paste0("MinHopDisp", r, sep = ""), min(HopDisp))
assign(paste0("EccHopDisp", r, sep = ""), (HopDisp[ContactHop] - MinHopDisp))
assign(paste0("EccStiffHop", r, sep = ""), ((max(Hop) - BW)/(HopDisp[ContactHop] - MinHopDisp))/Mass)
assign(paste0("JumpFreqHop", r, sep = ""), 1/(length(FullHop[[r]])*0.001))
}
for (r in 1:15){
#Hop1
#Calculate Acceleration
Hop <-  Hops[[r]]
HopAcc <- (Hop-BW)/Mass
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
#Acceleration Area
HopAccarea = HopAccavg2*0.001
HopVelInit = 1.3
#Velocity
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
#Velocity Area
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
#Displacement
HopDisp = cumsum(HopVelarea)
l = length(HopDisp)
#Adjust Init Velocity to get Final Displacment close to zero
if (HopDisp[l]>0){
while (HopDisp[l] > 0.0001) {
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
HopAccarea = HopAccavg2*0.001
HopVelInit = HopVelInit - 0.001
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
HopDisp = cumsum(HopVelarea)}
}else (HopDisp[l]<0)
{
while (HopDisp[l] < 0.0001) {
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
HopAccarea = HopAccavg2*0.001
HopVelInit = HopVelInit + 0.001
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
HopDisp = cumsum(HopVelarea)
}
}
#Calculate output variables
assign(paste0("PeakHop", r, sep = ""), max(Hop))
assign(paste0("PeakHopPC", r, sep = ""), max(Hop)/BW)
ContactHop <- 5 + which(Hop[5:length(Hop)] >5)[1]
assign(paste0("ContactTimeHop", r, sep = ""), (length(HopDisp) - ContactHop)*0.001)
assign(paste0("MinHopDisp", r, sep = ""), min(HopDisp))
assign(paste0("EccHopDisp", r, sep = ""), (HopDisp[ContactHop] - min(HopDisp)))
assign(paste0("EccStiffHop", r, sep = ""), ((max(Hop) - BW)/(HopDisp[ContactHop] - MinHopDisp))/Mass)
assign(paste0("JumpFreqHop", r, sep = ""), 1/(length(FullHop[[r]])*0.001))
}
for (r in 1:15){
#Hop1
#Calculate Acceleration
Hop <-  Hops[[r]]
HopAcc <- (Hop-BW)/Mass
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
#Acceleration Area
HopAccarea = HopAccavg2*0.001
HopVelInit = 1.3
#Velocity
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
#Velocity Area
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
#Displacement
HopDisp = cumsum(HopVelarea)
l = length(HopDisp)
#Adjust Init Velocity to get Final Displacment close to zero
if (HopDisp[l]>0){
while (HopDisp[l] > 0.0001) {
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
HopAccarea = HopAccavg2*0.001
HopVelInit = HopVelInit - 0.001
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
HopDisp = cumsum(HopVelarea)}
}else (HopDisp[l]<0)
{
while (HopDisp[l] < 0.0001) {
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
HopAccarea = HopAccavg2*0.001
HopVelInit = HopVelInit + 0.001
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
HopDisp = cumsum(HopVelarea)
}
}
#Calculate output variables
assign(paste0("PeakHop", r, sep = ""), max(Hop))
assign(paste0("PeakHopPC", r, sep = ""), max(Hop)/BW)
ContactHop <- 5 + which(Hop[5:length(Hop)] >5)[1]
assign(paste0("ContactTimeHop", r, sep = ""), (length(HopDisp) - ContactHop)*0.001)
assign(paste0("MinHopDisp", r, sep = ""), min(HopDisp))
assign(paste0("EccHopDisp", r, sep = ""), (HopDisp[ContactHop] - min(HopDisp)))
assign(paste0("EccStiffHop", r, sep = ""), ((max(Hop) - BW)/(HopDisp[ContactHop] - min(HopDisp))/Mass))
assign(paste0("JumpFreqHop", r, sep = ""), 1/(length(FullHop[[r]])*0.001))
}
for (r in 1:15){
#Hop1
#Calculate Acceleration
Hop <-  Hops[[r]]
HopAcc <- (Hop-BW)/Mass
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
#Acceleration Area
HopAccarea = HopAccavg2*0.001
HopVelInit = 1.3
#Velocity
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
#Velocity Area
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
#Displacement
HopDisp = cumsum(HopVelarea)
l = length(HopDisp)
#Adjust Init Velocity to get Final Displacment close to zero
if (HopDisp[l]>0){
while (HopDisp[l] > 0.0001) {
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
HopAccarea = HopAccavg2*0.001
HopVelInit = HopVelInit - 0.001
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
HopDisp = cumsum(HopVelarea)}
}else (HopDisp[l]<0)
{
while (HopDisp[l] < 0.0001) {
HopAccavg = rollapply(HopAcc, 2, mean)
HopAccavg2 = insert(HopAccavg, 1, 0)
HopAccarea = HopAccavg2*0.001
HopVelInit = HopVelInit + 0.001
HopVela = HopAccarea
HopVela[1] = HopVelInit+HopAccarea[1]
HopVel = cumsum(HopVela)
HopVelavg = rollapply(HopVel, 2, mean)
HopVelavg2 = insert(HopVelavg, 1, 0)
HopVelarea = HopVelavg2*0.001
HopDisp = cumsum(HopVelarea)
}
}
#Calculate output variables
assign(paste0("PeakHop", r, sep = ""), max(Hop))
assign(paste0("PeakHopPC", r, sep = ""), max(Hop)/BW)
ContactHop <- 5 + which(Hop[5:length(Hop)] >5)[1]
assign(paste0("ContactTimeHop", r, sep = ""), (length(HopDisp) - ContactHop)*0.001)
assign(paste0("MinHopDisp", r, sep = ""), min(HopDisp))
assign(paste0("EccHopDisp", r, sep = ""), (HopDisp[ContactHop] - min(HopDisp)))
assign(paste0("EccStiffHop", r, sep = ""), ((max(Hop) - BW)/(HopDisp[ContactHop] - min(HopDisp))/Mass))
assign(paste0("JumpFreqHop", r, sep = ""), 1/(length(FullHops[[r]])*0.001))
}
source('C:/Users/aaron.beach/OneDrive - nswis.com.au/GitHub/Stiffness-Shiny/Stiffness GGPlot.R')
source('C:/Users/aaron.beach/OneDrive - nswis.com.au/GitHub/Stiffness-Shiny/Stiffness GGPlot.R')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?assign
runApp()
runApp()
runApp()
install.packages("rsconnect")
install.packages("rtools")
install.packages(c("broom", "car", "cli", "crosstalk", "digest", "dplyr", "effectsize", "emmeans", "fansi", "farver", "forcats", "ggeffects", "ggfortify", "ggplot2", "ggrepel", "glmmTMB", "glue", "insight", "lava", "lifecycle", "modelr", "mvtnorm", "nloptr", "parameters", "pbkrtest", "plyr", "prettyunits", "quantmod", "R.methodsS3", "rlang", "rstudioapi", "shiny", "sjPlot", "sp", "SQUAREM", "stringi", "tidyselect", "vctrs", "xlsx", "xml2", "xts"))
install.packages("rsconnect")
shiny::runApp()
install.packages(c("backports", "bayestestR", "broom", "callr", "car", "carData", "caret", "dbplyr", "DT", "effectsize", "ellipsis", "emmeans", "fitzRoy", "foreach", "fs", "ggeffects", "ggfortify", "ggpmisc", "glue", "gWidgets", "haven", "Hmisc", "insight", "isoband", "janitor", "lme4", "lubridate", "maptools", "mnormt", "ModelMetrics", "modelr", "openxlsx", "parameters", "performance", "pillar", "pkgbuild", "pROC", "ps", "purrr", "quantmod", "quantreg", "Rcpp", "RCurl", "recipes", "reshape2", "rJava", "rlang", "scales", "shinyalert", "shinyFiles", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "sp", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "withr", "xfun", "xml2", "zoo"))
shiny::runApp()
R.version.string
shiny::runApp()
